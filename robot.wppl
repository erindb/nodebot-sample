// webppl robot.wppl --require robot

display('start');

var connect = robot.connect;
var stop = robot.stop;
var sendPosition = robot.sendPosition;
var moveForward = robot.moveForward;
var sendMap = robot.sendMap;
var turnRight = robot.turnRight;
var turnLeft = robot.turnLeft;

connect();

var printLocationEstimate = function(positionDist) {
	var xdist = Infer({method: 'enumerate'}, function() {return sample(positionDist).x;});
	var ydist = Infer({method: 'enumerate'}, function() {return sample(positionDist).y;});
	// console.log([{x: expectation(xdist), y: expectation(ydist)}]);
	sendPosition([{x: expectation(xdist), y: expectation(ydist)}]);
};

var printObjectEstimate = function(aMap) {
// 	var xdist = Infer({method: 'enumerate'}, function() {return sample(positionDist).x;});
// 	var ydist = Infer({method: 'enumerate'}, function() {return sample(positionDist).y;});
// 	console.log([{x: expectation(xdist), y: expectation(ydist)}]);
// 	sendPosition([{x: expectation(xdist), y: expectation(ydist)}]);
	// display(positionDist);
	sendMap(aMap);
};

var getLeftDistance = robot.getLeftDistance;
var getRightDistance = robot.getRightDistance;
var secPerFullTurn = 13;
var turnPerSec = secPerFullTurn / (2*Math.PI);
var secPerPaper = 3.75;
// var secPerPaper = 9;
var cmPerPaper = 27.94;
var cmPerSec = cmPerPaper / secPerPaper;
var xnoise = 1;
var ynoise = 1;
var thetanoise = 1;

var myRound = function(number) {
	return Math.round((number)*100)/100;
}

var updatePosition = function(position, robotCommand, delay) {
	if (robotCommand=='moveForward') {
		return {
			x: myRound(position.x + Math.cos(position.theta)*delay*cmPerSec),
			y: myRound(position.y + Math.sin(position.theta)*delay*cmPerSec),
			theta: myRound(position.theta)
		}
	} else if (robotCommand=='moveReverse') {
		return {
			x: myRound(position.x - Math.cos(position.theta)*delay*cmPerSec),
			y: myRound(position.y - Math.sin(position.theta)*delay*cmPerSec),
			theta: myRound(position.theta)
		}
	} else if (robotCommand=='turnLeft') {
		return {
			x: myRound(position.x),
			y: myRound(position.y),
			theta: myRound((position.theta + turnPerSec*delay) % (2*Math.PI))
		}
	} else if (robotCommand=='turnRight') {
		return {
			x: myRound(position.x),
			y: myRound(position.y),
			theta: myRound((position.theta - turnPerSec*delay) % (2*Math.PI))
		}
	} else {
		return position;
	}
}

var robotCommandPrior = function() {
		categorical(
			[2,1,1,1,0//.5
			], // weights on possible commands
			['moveForward',
			'turnRight',
			'turnLeft',
			'moveReverse',
			'stop'
		]);
}

var getObjectPositions = function(positionDist, ldistance, rdistance) {
	var xdist = Infer({method: 'enumerate'}, function() {return sample(positionDist).x;});
	var ydist = Infer({method: 'enumerate'}, function() {return sample(positionDist).y;});
	var thetadist = Infer({method: 'enumerate'}, function() {return sample(positionDist).theta;});
	var theta = expectation(thetadist);
	var x = expectation(xdist);
	var y = expectation(ydist);
	console.log(rdistance)
	if (ldistance > 10) {
		return [
			{
				x: x + Math.cos(theta)*rdistance,
				y: y + Math.sin(theta)*rdistance,
				color: 'blue'
			},
			{
				x: x + Math.cos(theta)*4,
				y: y + Math.sin(theta)*4,
				color: 'green'
			}
		]
	} else {
		return [
			{
				x: x + Math.cos(theta)*rdistance,
				y: y + Math.sin(theta)*rdistance,
				color: 'blue'
			}
		]
	}
}

var initialPosDist = Infer({method: 'enumerate'}, function() {return {x:0, y:0, theta: Math.PI/2}});
var initialMap = [];

var autonomous = function(n, positionDist, currentMap) {
	if (n==0) {
		return "finished";
	} else {
		var positionDist = positionDist?positionDist:initialPosDist;
		var currentMap = currentMap?currentMap:initialMap;
		var ldistance = getLeftDistance();
		var rdistance = getRightDistance();

		printLocationEstimate(positionDist);
		var newMap = currentMap.concat(getObjectPositions(positionDist, ldistance, rdistance));
		printObjectEstimate(newMap);

		var commands = sample(Infer(
			{method: 'enumerate'},
			function() {
				var position = sample(positionDist);
				var robotCommand = robotCommandPrior();

				// sample robot commands
				var delay = (randomInteger(10)+1)/10;

				if(ldistance > 10 | rdistance < 10) {
					condition(robotCommand=='moveReverse');
					condition(delay==1);
					// factor(delay); // want to move back longer
				} else {
					condition(robotCommand!='moveReverse');
				}

				// predict new position
				var newpos = updatePosition(position, robotCommand, delay);
				
				// factor(-Math.abs(newpos.x));
				// factor(-Math.abs(newpos.y));

				return [robotCommand, delay];
			}
		));

		var robotCommand = commands[0];
		var delay = commands[1];

		var newPositionDist = Infer(
			{method:'rejection', samples: 100},
			function() {
				var currentPosition = sample(positionDist);
				var nextPosition = updatePosition(currentPosition, robotCommand, delay);
				// return {
				// 	x: gaussian(nextPosition.x, xnoise),
				// 	y: gaussian(nextPosition.y, ynoise),
				// 	theta: gaussian(nextPosition.theta, thetanoise)
				// };
				return nextPosition;
			}
		);

		var robotMovement = robot[robotCommand];
		robotMovement(delay);

		// continue
		autonomous(n-1, newPositionDist, newMap);
	}
};

// turnRight(secPerFullTurn);
// turnLeft(secPerFullTurn);

// moveForward(9);

autonomous(100);

stop();

"finished";