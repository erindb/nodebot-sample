// webppl robot.wppl --require robot

display('start');

var connect = robot.connect;
connect();

var getLeftDistance = robot.getLeftDistance;
var getRightDistance = robot.getRightDistance;
var secPerFullTurn = 8.75;
var turnPerSec = secPerFullTurn / (2*Math.PI);

var updatePosition = function(position, robotCommand, delay) {
	if (robotCommand=='moveForward') {
		return {
			x: Math.round((position.x + Math.cos(position.theta))*100)/100,
			y: Math.round((position.y + Math.sin(position.theta))*100)/100,
			theta: Math.round(position.theta*100)/100
		}
	} else if (robotCommand=='moveReverse') {
		return {
			x: Math.round((position.x + Math.cos(position.theta))*100)/100,
			y: Math.round((position.y + Math.sin(position.theta))*100)/100,
			theta: Math.round(position.theta*100)/100
		}
	} else if (robotCommand=='turnLeft') {
		return {
			x: position.x,
			y: position.y,
			theta: Math.round(((position.theta + turnPerSec*delay) % (2*Math.PI))*100)/100
		}
	} else if (robotCommand=='turnRight') {
		return {
			x: position.x,
			y: position.y,
			theta: Math.round(((position.theta - turnPerSec*delay) % (2*Math.PI))*100)/100
		}
	} else {
		return position;
	}
}

var initialPosDist = Infer({method: 'enumerate'}, function() {return {x:0, y:0, theta:0}});

var move = function(n, positionDist) {
	var positionDist = positionDist?positionDist:initialPosDist;
	var ldistance = getLeftDistance();
	var rdistance = getRightDistance();


	var marginalCommandsDist = Infer(
		{method: 'enumerate', samples: 1},
		function() {
			var position = sample(positionDist);

			// sample robot commands
			var delay = (randomInteger(10)+1)/10;
			var robotCommand = uniformDraw([
				'moveForward',
				'turnRight',
				'turnLeft',
				'moveReverse',
				'stop'
			]);

			if(ldistance > 10 | rdistance < 10) {
				condition(robotCommand=='moveReverse');
				factor(delay); // want to move back longer
			} else {
				condition(robotCommand!='moveReverse');
			}

			// predict new position
			var newpos = updatePosition(position, robotCommand, delay);
			
			factor(-Math.abs(newpos.x));
			factor(-Math.abs(newpos.y));

			return [robotCommand, delay, newpos];
		}
	);

	var commands = sample(marginalCommandsDist);
	var newPositionDist = Infer({method:'enumerate'}, function() {return sample(marginalCommandsDist)[2]});
	display(newPositionDist);

	var robotCommand = commands[0];
	var delay = commands[1];
	console.log(robotCommand);
	console.log(delay);
	console.log("getLeftDistance: " + ldistance);
	console.log("getRightDistance: " + rdistance);

	// actually move
	display(robotCommand + ' for ' + delay + 's');
	var robotMovement = robot[robotCommand];
	robotMovement(delay);

	// continue
	move(n-1, newPositionDist);
};

move(20);

// var turnRight = robot.turnRight;
// turnRight(8.75);
// // var turnLeft = robot.turnLeft;
// // turnLeft(8.5);

var stop = robot.stop;
stop();

// display('connected');
// var moveForward = robot.moveForward;
// display('moveForward defined');
// moveForward();
// display('moveForward');
// moveForward();
// display('moveForward');
// moveForward();
// display('moveForward');

"finished";